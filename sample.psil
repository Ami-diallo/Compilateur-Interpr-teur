;;; Quelques exemples.              -*- mode: lisp-data; coding: utf-8 -*-

2                                       ; ↝ 2
+                                       ; ↝ <fun +>
(call (call + 3) 6)                     ; ↝ 9
(call + 2 4)                            ; ↝ 6

(hastype (call + 1 5) Int)              ; ↝ 6

(call (hastype (fun x x)
               (Int -> Int))
      3)                                ; ↝ 3

(call (call (hastype (fun x (fun y (call * x y))) (Int -> (Int -> Int)))
            3)
      5)                                ; ↝ 15

(call (call (hastype (fun x y (call * x y)) (Int Int -> Int))
            3)
      5)                                ; ↝ 15

(tuple 2 3)                             ; ↝ [2 3]

(let (x Int 1) x)                           ; ↝ 1

(let (x 2) (y 3) (call + x y))              ;5




(hastype (fetch (tuple 1 42) (x y) (call + x y)) Int) ; ↝ 43

(hastype (if (call <= 0 42) (call = 0 0) (call = 0 1)) Bool)   ; ↝ true

(let (* +) (/ -) (call * 5 (call / 3 1))) ; ↝ 7



; Mes 5 tests
(let (x 2) (y 4) (- 4)  (Func (a Int) (b Int) (c Int) Int  (call * (call + a b) c)) (call Func x y -))       ;24
(hastype (if (call = (let (maFun (Int Int -> Int) (fun x y (call + x y)))  (call maFun 0 0)) 0)   (let (x (call = 0 0)) x) (let (y (call = 0 1)) y) ) Bool)    ; True
(hastype (fetch (tuple (hastype (fun x y (call + x y)) (Int Int -> Int) ) 2  3)  (a b c) (call a b c)) Int)     ;5
(call (hastype (fun x1 x2 x3 (call + (call + x1 x2) x3)) (Int Int Int -> Int)) 3 4 5)   ;12
(hastype (fun e1 e2 e3 e4 (call / (call * (call + e1 e2) e3) e4))  (Int Int Int Int -> Int) )  ; Int -> Int -> Int -> Int -> Int
; Fin de mes tests





;(let (true (call = 0 0)) (false (call = 0 1)) (not (x Bool) Bool (if x false true)) (hastype (if (call not (call not (call <= 42 0))) true false) Bool))  ; false
(let (plus1 (call plus 1))    (plus (x Int) (Int -> Int) (fun y (call + y x)))   (call plus1 5)) ; 6
